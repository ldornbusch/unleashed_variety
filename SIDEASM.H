char pAsmText[]=

"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"push ebp                  "
"mov ebp,esp               "
"mov ebp,ebp+8             "
"mov eax, ebp+4            "
"movd mm0, ebp+4           "
"mov edx, ebp+12           "
"movq mm1,mm0              "
"psllq mm0,32              "
"mov edi, ebp              "
"por mm0,mm1               "
"mov ecx, ebp+8            "
"mov ebx,ecx               "
"shr ecx,1                 "
"jz .l_last                "
"movq  edi ,mm0            "
"add edi,byte 8            "
"dec ecx                   "
"jnz .L_x                  "
"test ebx,1                "
"jz .l_endline             "
"mov edi,eax               "
"add edi,byte 4            "
"add edi, ebp+16           "
"dec edx                   "
"jnz .l_y                  "
"emms                      "
"pop ebp                   "
"ret                       "
"push ebp                  "
"mov ebp,esp               "
"mov ebp, ebp+8            "
"mov eax, ebp+4            "
"mov ebx, ebp+4            "
"mov edx, ebp+12           "
"mov edi, ebp              "
"shl eax,16                "
"and ebx,0ffffh            "
"or eax,ebx                "
"movd mm0,eax              "
"movd mm1,eax              "
"psllq mm0,32              "
"por mm0,mm1               "
"mov ecx, ebp+8            "
"test edi,3                "
"jz .l_aligned             "
"mov  edi ,ax              "
"add edi,BYTE 2            "
"dec ecx                   "
"jz .l_endline             "
"mov ebx,ecx               "
"shr ecx,2                 "
"jz .l_last                "
"movq  edi ,mm0            "
"add edi,byte 8            "
"dec ecx                   "
"jnz .L_x                  "
"and ebx,byte 3            "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jnz .l_endline            "
"add edi, ebp+16           "
"dec edx                   "
"jnz .l_y                  "
"pop ebp                   "
"ret                       "
"checkcpu:                 "
"pushfd                    "
"pop eax                   "
"mov ecx,eax               "
"xor eax,040000h           "
"push eax                  "
"popfd                     "
"pushfd                    "
"pop eax                   "
"xor eax,ecx               "
"jz .l1                    "
"push ecx                  "
"popfd                     "
"mov eax,ecx               "
"xor eax,200000h           "
"push eax                  "
"popfd                     "
"pushfd                    "
"pop eax                   "
"xor eax,ecx               "
"je .l1                    "
"pusha                     "
"mov eax,1                 "
"cpuid                     "
"mov  cpu_flags ,edx       "
"popa                      "
"mov eax, cpu_flags        "
".end:                     "
"ret                       "
"push ebp                  "
"mov ebp,esp               "
"mov ebp,ebp+8             "
"mov eax, ebp+4            "
"movd mm0, ebp+4           "
"mov edx, ebp+12           "
"movq mm1,mm0              "
"psllq mm0,32              "
"mov edi, ebp              "
"por mm0,mm1               "
"mov ecx, ebp+8            "
"mov ebx,ecx               "
"shr ecx,1                 "
"jz .l_last                "
"movq  edi ,mm0            "
"add edi,byte 8            "
"dec ecx                   "
"jnz .L_x                  "
"test ebx,1                "
"jz .l_endline             "
"mov edi,eax               "
"add edi,byte 4            "
"add edi, ebp+16           "
"dec edx                   "
"jnz .l_y                  "
"emms                      "
"pop ebp                   "
"ret                       "
"push ebp                  "
"mov ebp,esp               "
"mov ebp, ebp+8            "
"mov eax, ebp+4            "
"mov ebx, ebp+4            "
"mov edx, ebp+12           "
"mov edi, ebp              "
"shl eax,16                "
"and ebx,0ffffh            "
"or eax,ebx                "
"movd mm0,eax              "
"movd mm1,eax              "
"psllq mm0,32              "
"por mm0,mm1               "
"mov ecx, ebp+8            "
"test edi,3                "
"jz .l_aligned             "
"mov  edi ,ax              "
"add edi,BYTE 2            "
"dec ecx                   "
"jz .l_endline             "
"mov ebx,ecx               "
"shr ecx,2                 "
"jz .l_last                "
"movq  edi ,mm0            "
"add edi,byte 8            "
"dec ecx                   "
"jnz .L_x                  "
"and ebx,byte 3            "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jz .l_endline             "
"mov  edi ,ax              "
"add edi,byte 2            "
"dec ebx                   "
"jnz .l_endline            "
"add edi, ebp+16           "
"dec edx                   "
"jnz .l_y                  "
"pop ebp                   "
"ret                       "
"checkcpu:                 "
"pushfd                    "
"pop eax                   "
"mov ecx,eax               "
"xor eax,040000h           "
"push eax                  "
"popfd                     "
"pushfd                    "
"pop eax                   "
"xor eax,ecx               "
"jz .l1                    "
"push ecx                  "
"popfd                     "
"mov eax,ecx               "
"xor eax,200000h           "
"push eax                  "
"popfd                     "
"pushfd                    "
"pop eax                   "
"xor eax,ecx               "
"je .l1                    "
"pusha                     "
"mov eax,1                 "
"cpuid                     "
"mov  cpu_flags ,edx       "
"popa                      "
"mov eax, cpu_flags        "
".end:                     "
"ret                       "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          "
"                          ";

